generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          String       @id
  type        ActivityType
  title       String
  description String?
  leadId      String?
  campaignId  String?
  userId      String?
  metadata    Json?
  createdAt   DateTime     @default(now())
  Campaign    Campaign?    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  Lead        Lead?        @relation(fields: [leadId], references: [id], onDelete: Cascade)
  User        User?        @relation(fields: [userId], references: [id])

  @@index([campaignId])
  @@index([createdAt])
  @@index([leadId])
  @@index([type])
  @@index([userId])
}

model Appointment {
  id           String            @id
  title        String
  description  String?
  startTime    DateTime
  endTime      DateTime
  location     String?
  meetingUrl   String?
  type         AppointmentType
  status       AppointmentStatus @default(SCHEDULED)
  userId       String
  leadId       String?
  attendees    Json?
  reminderSent Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime
  Lead         Lead?             @relation(fields: [leadId], references: [id])
  User         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([leadId])
  @@index([startTime])
  @@index([status])
  @@index([type])
  @@index([userId])
}

model BusinessSettings {
  id            String   @id
  userId        String   @unique
  companyName   String?
  address       String?
  phone         String?
  website       String?
  logo          String?
  billingEmail  String?
  businessHours Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id           String         @id
  name         String
  type         CampaignType
  status       CampaignStatus @default(DRAFT)
  subject      String?
  body         String?
  previewText  String?
  startDate    DateTime?
  endDate      DateTime?
  budget       Float?
  spent        Float?         @default(0)
  audience     Int?
  sent         Int            @default(0)
  delivered    Int            @default(0)
  opened       Int            @default(0)
  clicked      Int            @default(0)
  converted    Int            @default(0)
  bounced      Int            @default(0)
  unsubscribed Int            @default(0)
  revenue      Float?         @default(0)
  roi          Float?
  isABTest     Boolean        @default(false)
  abTestData   Json?
  createdById  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Activity     Activity[]
  User         User           @relation(fields: [createdById], references: [id])
  Tag          Tag[]

  @@index([createdAt])
  @@index([createdById])
  @@index([status])
  @@index([type])
}

model EmailConfig {
  id           String   @id
  userId       String   @unique
  provider     String   @default("sendgrid")
  apiKey       String?
  fromEmail    String?
  fromName     String?
  smtpHost     String?
  smtpPort     Int?
  smtpUser     String?
  smtpPassword String?
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailTemplate {
  id         String    @id
  name       String
  subject    String
  body       String
  category   String?
  isActive   Boolean   @default(true)
  variables  Json?
  usageCount Int       @default(0)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([category])
  @@index([isActive])
}

model Integration {
  id          String    @id
  userId      String
  provider    String
  isConnected Boolean   @default(false)
  credentials Json?
  config      Json?
  lastSyncAt  DateTime?
  syncStatus  String?
  syncError   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([provider])
  @@index([userId])
}

model Lead {
  id            String        @id
  name          String
  email         String        @unique
  phone         String?
  company       String?
  position      String?
  status        LeadStatus    @default(NEW)
  score         Int           @default(0)
  source        String?
  value         Float?
  stage         String?
  assignedToId  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  lastContactAt DateTime?
  customFields  Json?
  Activity      Activity[]
  Appointment   Appointment[]
  User          User?         @relation(fields: [assignedToId], references: [id])
  Note          Note[]
  Tag           Tag[]

  @@index([assignedToId])
  @@index([createdAt])
  @@index([score])
  @@index([source])
  @@index([status])
}

model Message {
  id          String           @id
  type        MessageType
  direction   MessageDirection
  subject     String?
  body        String
  fromAddress String
  toAddress   String
  status      MessageStatus    @default(PENDING)
  readAt      DateTime?
  repliedAt   DateTime?
  leadId      String?
  threadId    String?
  parentId    String?
  externalId  String?
  provider    String?
  metadata    Json?
  createdAt   DateTime         @default(now())

  @@index([createdAt])
  @@index([direction])
  @@index([leadId])
  @@index([status])
  @@index([threadId])
  @@index([type])
}

model Note {
  id        String   @id
  content   String
  leadId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  User      User     @relation(fields: [authorId], references: [id])
  Lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([leadId])
}

model NotificationSettings {
  id                 String   @id
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  channels           Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SMSConfig {
  id          String   @id
  userId      String   @unique
  provider    String   @default("twilio")
  accountSid  String?
  authToken   String?
  phoneNumber String?
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SMSTemplate {
  id         String    @id
  name       String
  body       String
  category   String?
  isActive   Boolean   @default(true)
  variables  Json?
  usageCount Int       @default(0)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime

  @@index([category])
  @@index([isActive])
}

model Tag {
  id        String     @id
  name      String     @unique
  color     String?
  createdAt DateTime   @default(now())
  Campaign  Campaign[]
  Lead      Lead[]
}

model Task {
  id           String       @id
  title        String
  description  String?
  dueDate      DateTime?
  priority     TaskPriority @default(MEDIUM)
  status       TaskStatus   @default(PENDING)
  assignedToId String?
  leadId       String?
  completedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  User         User?        @relation(fields: [assignedToId], references: [id])

  @@index([assignedToId])
  @@index([dueDate])
  @@index([priority])
  @@index([status])
}

model Team {
  id               String           @id
  name             String
  slug             String           @unique
  settings         Json?
  subscriptionTier SubscriptionTier @default(FREE)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  TeamMember       TeamMember[]

  @@index([slug])
}

model TeamMember {
  id       String   @id
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())
  Team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model User {
  id                   String                @id
  email                String                @unique
  password             String
  firstName            String
  lastName             String
  avatar               String?
  role                 Role                  @default(USER)
  isActive             Boolean               @default(true)
  emailVerified        Boolean               @default(false)
  timezone             String                @default("America/New_York")
  language             String                @default("en")
  lastLoginAt          DateTime?
  lastLoginIp          String?
  twoFactorEnabled     Boolean               @default(false)
  twoFactorSecret      String?
  subscriptionTier     SubscriptionTier      @default(FREE)
  subscriptionId       String?
  trialEndsAt          DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  Activity             Activity[]
  Appointment          Appointment[]
  BusinessSettings     BusinessSettings?
  Campaign             Campaign[]
  EmailConfig          EmailConfig?
  Integration          Integration[]
  Lead                 Lead[]
  Note                 Note[]
  NotificationSettings NotificationSettings?
  SMSConfig            SMSConfig?
  Task                 Task[]
  TeamMember           TeamMember[]

  @@index([email])
  @@index([role])
}

model Workflow {
  id                String              @id
  name              String
  description       String?
  isActive          Boolean             @default(false)
  triggerType       WorkflowTrigger
  triggerData       Json?
  actions           Json
  executions        Int                 @default(0)
  successRate       Float?
  lastRunAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  WorkflowExecution WorkflowExecution[]

  @@index([isActive])
  @@index([triggerType])
}

model WorkflowExecution {
  id          String          @id
  workflowId  String
  status      ExecutionStatus
  error       String?
  leadId      String?
  metadata    Json?
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  Workflow    Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([startedAt])
  @@index([status])
  @@index([workflowId])
}

enum ActivityType {
  EMAIL_SENT
  EMAIL_OPENED
  EMAIL_CLICKED
  SMS_SENT
  SMS_DELIVERED
  CALL_MADE
  CALL_RECEIVED
  MEETING_SCHEDULED
  MEETING_COMPLETED
  NOTE_ADDED
  STATUS_CHANGED
  STAGE_CHANGED
  LEAD_CREATED
  LEAD_ASSIGNED
  CAMPAIGN_LAUNCHED
  CAMPAIGN_COMPLETED
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AppointmentType {
  CALL
  MEETING
  DEMO
  CONSULTATION
  FOLLOW_UP
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignType {
  EMAIL
  SMS
  PHONE
  SOCIAL
}

enum ExecutionStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

enum MessageType {
  EMAIL
  SMS
  CALL
  SOCIAL
  NEWSLETTER
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum SubscriptionTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeamRole {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum WorkflowTrigger {
  LEAD_CREATED
  LEAD_STATUS_CHANGED
  LEAD_ASSIGNED
  CAMPAIGN_COMPLETED
  EMAIL_OPENED
  TIME_BASED
  SCORE_THRESHOLD
  TAG_ADDED
  MANUAL
}
